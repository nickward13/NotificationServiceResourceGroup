{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
  "parameters": {
    "APIMKey": {
      "type": "securestring" 
    },
    "APIMEndpoint": {
      "type": "string",
      "defaultValue": "https://hectagonapi.azure-api.net"
    }
  },
  "variables": {
    "singleQuote": "'",
    "hostingPlanName": "FunctionPlan",
    "TaskFunctionsName": "[concat('TaskFunctions',uniqueString(resourceGroup().id))]",
    "TaskMobileServiceName": "[concat('TaskMobileService', uniqueString(resourceGroup().id))]",
    "TaskPushNotificationFunctionName": "TaskPushNotificationFunction",
    "TaskNotificationHubNamespace": "[concat('TaskNotificationHub',uniqueString(resourceGroup().id))]",
    "TaskNotificationHubName": "TaskPushNotifications"
  },
  "resources": [
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2015-04-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "name": "[variables('hostingPlanName')]",
        "computeMode": "Dynamic",
        "sku": "Dynamic"
      },
      "tags": { "displayName": "FunctionPlan" }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2015-08-01-preview",
      "location": "[resourceGroup().location]",
      "name": "[concat('office365Connection', uniqueString(resourceGroup().id))]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]"
        },
        "displayName": "Office 365 Outlook"
      },
      "tags": { "displayName": "Office365Connection" }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "name": "SendTaskCompleteEmail",
      "apiVersion": "2016-06-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "properties": {
                    "TaskId": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "TaskId"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "GetTask": {
              "runAfter": {},
              "type": "Http",
              "inputs": {
                "headers": {
                  "Ocp-Apim-Subscription-Key": "[parameters('APIMKey')]"
                },
                "method": "GET",
                "uri": "[concat(parameters('APIMEndpoint'), '/task/@{triggerBody()[', variables('singleQuote'), 'TaskId', variables('singleQuote') ,']}')]"
              }
            },
            "Send_an_email": {
              "runAfter": {
                "GetTask": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "Body": "Your task has been completed.\n\nTask name is: @{body('GetTask')['Name']}",
                  "Subject": "Task completed: @{body('GetTask')['Name']}",
                  "To": "nickward@microsoft.com"
                },
                "host": {
                  "api": {
                    "runtimeUrl": "https://logic-apis-australiasoutheast.azure-apim.net/apim/office365"
                  },
                  "connection": {
                    "name": "@parameters('$connections')['office365']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/Mail"
              }
            }
          },
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "office365": {
                "connectionId": "[resourceId('Microsoft.Web/connections', concat('office365Connection', uniqueString(resourceGroup().id)))]",
                "connectionName": "[concat('office365Connection', uniqueString(resourceGroup().id))]",
                "id": "[reference(concat('Microsoft.Web/connections/office365Connection', uniqueString(resourceGroup().id)), '2016-06-01').api.id]"
              }
            }
          }
        }
      },
      "resources": [],
      "dependsOn": []
    },
    {
      "apiVersion": "2014-09-01",
      "type": "Microsoft.NotificationHubs/namespaces",
      "name": "[variables('TaskNotificationHubNamespace')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "region": "[resourceGroup().location]",
        "namespaceType": "NotificationHub"
      },
      "tags": {
        "displayName": "TaskNotificationHubNamespace"
      }
    },
    {
      "apiVersion": "2014-09-01",
      "name": "[concat(variables('TaskNotificationHubNamespace'), '/', variables('TaskNotificationHubName'))]",
      "type": "Microsoft.NotificationHubs/namespaces/notificationHubs",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('TaskNotificationHubNamespace')]"
      ],
      "tags": {
        "displayName": "TaskNotificationHubApp"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "kind": "functionapp",
      "name": "[variables('TaskFunctionsName')]",
      "apiVersion": "2015-08-01",
      "location": "Australia Southeast",
      "tags": {
        "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]": "Resource",
        "displayName": "TaskFunctions"
      },
      "properties": {
        "name": "[variables('TaskFunctionsName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
      },
      "resources": [],
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
      ]
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[concat(variables('TaskFunctionsName'),'/', variables('TaskPushNotificationFunctionName'))]",
      "type": "Microsoft.Web/sites/functions",
      "tags": {
        "displayName": "TaskPushNotificationFunction"
      },
      "properties": {
        "config": {
          "bindings": [
            {
              "authLevel": "function",
              "type": "httpTrigger",
              "direction": "in",
              "name": "req"
            },
            {
              "type": "http",
              "direction": "out",
              "name": "res"
            }
          ]
        },
        "files": {
          "index.js": "[concat('module.exports = function(context, req) {\r\n    context.log(', variables('singleQuote'), 'Node.js HTTP trigger function processed a request. RequestUri=%s', variables('singleQuote'), ', req.originalUrl);\r\n\r\n    if (req.query.TaskName || (req.body && req.body.TaskName)) {\r\n        var azure = require(', variables('singleQuote'), 'azure-sb', variables('singleQuote'), ');\r\n        \r\n        var notificationHubService = azure.createNotificationHubService(', variables('singleQuote'), variables('TaskNotificationHubName'), variables('singleQuote'), ',', variables('singleQuote'), listkeys(resourceId('Microsoft.NotificationHubs/namespaces/notificationHubs/authorizationRules', variables('TaskNotificationHubNamespace'), variables('TaskNotificationHubName'), 'DefaultFullSharedAccessSignature'), '2014-09-01').primaryConnectionString, variables('singleQuote'), ');\r\n        \r\n        var payload = ', variables('singleQuote'), '<toast><visual><binding template=\"ToastText01\"><text id=\"1\">Task completed: ', variables('singleQuote'), ' + (req.query.TaskName || req.body.TaskName) + ', variables('singleQuote'), '!</text></binding></visual></toast>', variables('singleQuote'), ';\r\n        \r\n        notificationHubService.wns.send(null, payload , ', variables('singleQuote'), 'wns/toast', variables('singleQuote'), ', function(error){\r\n            if(!error){\r\n                // notification sent\r\n                context.res = {\r\n                body: \"Notification sent\"\r\n                    \r\n                };\r\n            }\r\n        });\r\n        \r\n        context.res = {\r\n            // status: 200, /* Defaults to 200 */\r\n            \r\nbody: \"Notification sent for task: \" + (req.query.TaskName || req.body.TaskName)\r\n        };\r\n    }\r\n    else {\r\n        context.res = {\r\n            status: 400,\r\n            body: \"Please pass a task name on the query string or in the request body\"\r\n        };\r\n    }\r\n       \r\n\r\n    context.done();\r\n};\r\n')]"
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Web/sites/', variables('TaskFunctionsName'))]",
        "[variables('TaskNotificationHubName')]"
      ]
    },
    {
      "type": "Microsoft.Logic/workflows",
      "name": "SendTaskCompleteNotification",
      "apiVersion": "2016-06-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "properties": {
                    "TaskId": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "TaskId"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "Condition": {
              "actions": {
                "SendPushNotification": {
                  "runAfter": {},
                  "type": "Http",
                  "inputs": {
                    "headers": {
                      "Content-Type": "application/json",
                      "Ocp-Apim-Subscription-Key": "[parameters('APIMKey')]"
                    },
                    "method": "POST",
                    "uri": "[concat(parameters('APIMEndpoint'), '/notifications/SendTaskCompletePushNotification?TaskName=@{body(', variables('singleQuote'), 'GetTask', variables('singleQuote') ,')[', variables('singleQuote'), 'Name', variables('singleQuote') ,']}')]"
                  }
                }
              },
              "runAfter": {
                "GetTask": [
                  "Succeeded"
                ]
              },
              "expression": "@contains(body('GetTask')['Name'], 'URGENT')",
              "type": "If"
            },
            "GetTask": {
              "runAfter": {},
              "type": "Http",
              "inputs": {
                "headers": {
                  "Ocp-Apim-Subscription-Key": "[parameters('APIMKey')]"
                },
                "method": "GET",
                "uri": "[concat(parameters('APIMEndpoint'), '/task/@{triggerBody()[', variables('singleQuote'), 'TaskId', variables('singleQuote') ,']}')]"
              }
            },
            "SendEmailNotification": {
              "runAfter": {
                "Condition": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "headers": {
                  "Content-Type": "application/json",
                  "Ocp-Apim-Subscription-Key": "[parameters('APIMKey')]"
                },
                "method": "POST",
                "uri": "[concat(parameters('APIMEndpoint'), '/notifications/SendTaskCompleteEmail/@{triggerBody()[', variables('singleQuote'), 'TaskId', variables('singleQuote'), ']}')]"
              }
            }
          },
          "outputs": {}
        },
        "parameters": {}
      },
      "resources": [],
      "dependsOn": []
    }
  ],
    "outputs": {
    }
}
